import java.util.*;

public class Main {

    public static class Node{
        int data;
        Node left;
        Node right;
        
        // Node(int data,Node left, Node right){
        //     this.data= data;
        //     this.left= left;
        //     this.right= right;
        // }
    }
    
    public static class Pair{
        Node node;
        int state;
    }
    
    public static Node construct(Integer[] arr){
        Stack<Pair> s = new Stack<>();
        Node root = new Node();
        root.data= arr[0];
        
        Pair rp = new Pair();
        rp.node=root;
        rp.state = 1;
        
        s.push(rp);
        int idx=1;
        
        while(s.size()>0){
            Pair peek = s.peek();
            if(peek.state==1){
                
                if(arr[idx]!=null){         // agar array me null value toh nhi ayi is index par
                Node left = new Node();     // naya left node banao
                left.data = arr[idx];       // idx me utha kr left ke as a data ko de dege
                peek.node.left = left;      // jo peek pr node padi h usme left node ko as a left child add kr dege
    
                
                Pair lcp = new Pair();      // jo left child banaya h use bhi toh push krna h toh as a pair bana kr push krege
                lcp.node = left;
                lcp.state = 1;
                s.push(lcp);
                
                }
                
             peek.state++;           
                idx++;
            }
            else if(peek.state==2){
                  if(arr[idx]!=null){         // agar array me null value toh nhi ayi is index par
                Node right = new Node();     // naya right node banao
                right.data = arr[idx];       // idx me utha kr left ke as a data ko de dege
                peek.node.right = right;      // jo peek pr node padi h usme left node ko as a left child add kr dege
           
                
                Pair rcp = new Pair();      // jo left child banaya h use bhi toh push krna h toh as a pair bana kr push krege
                rcp.node = right;
                rcp.state = 1;
                s.push(rcp);
            }
            
             peek.state++;           
                idx++;
        }
        else if(peek.state==3){
            s.pop();
        }
        
    }
    return root;
    }
    
    
    public static void display(Node node){
        if(node == null){
            return;
        }
        String str = " <-" +node.data+ "-> ";
        String lcstr = node.left==null?".":node.left.data + "";
                String rcstr = node.right==null?".":node.right.data+"";
                System.out.println(lcstr + str + rcstr);
                display(node.left);
                display(node.right);
    } 
    public static int size(Node node) {
    // write your code here
      if(node==null){
        return 0;
      }

      // int left = size(node.left);
      // int right = size(node.right);
    return size(node.left) +size(node.right) + 1;
  }

  public static int sum(Node node) {
    // write your code here
     if(node==null){
        return 0;
      }

      // int left = sum(node.left);
      // int right = sum(node.right);
    return sum(node.left) +sum(node.right) + node.data;
    
  }


  public static int max(Node node) {
    // write your code here
    if(node==null){
      return Integer.MIN_VALUE;
    }
    int leftmax = max(node.left);
    int rightmax = max(node.right);
    int maxcomparison = Math.max(node.data ,Math.max(leftmax,rightmax));
    
    return maxcomparison;


  }

  public static int height(Node node) {
    // write your code here
    int ht=-1;

    if(node==null){
      return ht;
    }
    int left = height(node.left);
    int right = height(node.right);
    int comp = Math.max(left,right) + 1;
    return comp;

  }
    

  public static void main(String[] args) {
    // Write your code here
    Integer[] arr=new Integer[]{50 ,25 ,12 ,null ,null ,37 ,30 ,null ,null ,null ,75 ,62 ,null ,70 ,null ,null ,87 ,null ,null};
    Node root = construct(arr);
    display(root);
    int size = size(root);
    int sum = sum(root);
    int max = max(root);
    int ht = height(root);
    System.out.println(size);
    System.out.println(sum);
    System.out.println(max);
    System.out.println(ht);

  }
}