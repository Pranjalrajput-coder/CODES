import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }

   static class Pair implements Comparable<Pair>{
      int vtx;
      String psf;
      int total_weight;

      Pair(int vtx,String psf, int total_weight){
         this.vtx= vtx;
         this.psf=psf;
         this.total_weight = total_weight;
      }

      public int compareTo(Pair o){
         return this.total_weight - o.total_weight;
      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      int src = Integer.parseInt(br.readLine());
      // write your code here
      boolean visted[] = new boolean[vtces];

      PriorityQueue<Pair> pq = new PriorityQueue<>();
      pq.add(new Pair(src,src+"",0));

      while(pq.size()>0){
         Pair p = pq.remove();
         
         if(visted[p.vtx]==true){
            continue;
         }
         visted[p.vtx]=true;

         System.out.println(p.vtx +" via " + p.psf + " @ " +p.total_weight);

            for(int i=0;i<graph[p.vtx].size();i++){
               Edge e = graph[p.vtx].get(i);
               int nbr = e.nbr;

               if(visted[nbr]==false){
                  pq.add(new Pair(nbr,p.psf + nbr + "",p.total_weight+e.wt));
               } 
            }

      }
      
      
   }
}