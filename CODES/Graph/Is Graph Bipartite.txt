import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   static class Pair{
      int vtx;
      String psf;
      int level;

      Pair(int vtx,String psf,int level){
         this.vtx = vtx;
         this.psf = psf;
         this.level = level;

      }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
      int visited[] = new int[vtces];
      Arrays.fill(visited,-1);
      for(int i=0 ;i<graph.length;i++){
         if(visited[i] == -1){
            boolean result = igb(graph,visited,i);
            if(result == false){
               System.out.println(false);
               return;
            }
         }

      }
      System.out.println(true);
   }

   static boolean igb (ArrayList<Edge>[] graph, int visited[] , int src){
      ArrayDeque<Pair> q = new ArrayDeque<>();
      q.add(new Pair(src,src+" ",0));

      while(q.size()>0){
         //remove
            Pair p = q.removeFirst();
         //mark
               if(visited[p.vtx]!=-1){
                     if(p.level!=visited[p.level]){
                        return false;
                     }
               }else{
               visited[p.vtx]= p.level;
               }

         // work
         //add nbr
         for(int i=0;i<graph[src].size();i++){
            Edge e = graph[src].get(i);
            int nbr = e.nbr;
               if(visited[nbr]==-1){
                 q.add(new Pair(nbr, p.psf+nbr+"" ,p.level+1));
               }

         }
      }
      return true;
   }
}