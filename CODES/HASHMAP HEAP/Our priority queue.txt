import java.io.*;
import java.util.*;

public class Main {

  public static class PriorityQueue {
    ArrayList<Integer> data;

    public PriorityQueue() {
      data = new ArrayList<>();
    }

    void swap(int i, int j){
        int ith = data.get(i);
        int jth = data.get(j);
        data.set(i, jth);
        data.set(j, ith);
    }

    public void add(int val) {
      // write your code here
       data.add(val);
      upheapify(data.size() - 1);
    }

    public void upheapify(int i){
      if(i==0){
        return;
      }
        int parentindex = (i -1) / 2;
         if(data.get(i) < data.get(parentindex)){
           swap(parentindex,i);
           upheapify(parentindex);
         }
    }

    public int remove() {
     
     if(data.size()==0){
       System.out.println("Underflow");
       return -1;
     }

     swap(0,data.size()-1);
     int val = data.remove(data.size()-1);

     downheapify(0);
     return val;
    }

    public void downheapify(int i){     
      int mini = i;
      

      // sabse chota konsa hoga parent , leftchild, aur right child me woh niche ke 2 if condition pata lagaege
        int left_child = (2 * i) + 1 ;
        if(left_child < data.size() && data.get(left_child) < data.get(mini)){
            mini = left_child;
        }


        int right_child =(2 * i) + 2 ;
    if(right_child < data.size() && data.get(right_child) < data.get(mini)){
        mini= right_child;
    }

        if(mini !=i){
          swap(mini,i);
          downheapify(mini);
        }

      }

    

    public int peek() {
      
     if(data.size()==0){
       System.out.println("Underflow");
       return -1;
     }
      return data.get(0);
    }

    public int size() {
      return data.size();
    }
}

  

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PriorityQueue qu = new PriorityQueue();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("add")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        qu.add(val);
      } else if (str.startsWith("remove")) {
        int val = qu.remove();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("peek")) {
        int val = qu.peek();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("size")) {
        System.out.println(qu.size());
      }
      str = br.readLine();
    }
  }
}