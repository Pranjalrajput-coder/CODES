import java.io.*;
import java.util.*;

public class Main{
  

public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String exp = br.readLine();

    // code

    Stack<Character> operand = new Stack<>();
    Stack<Integer> operator = new Stack<>();

    for(int i =0;i<exp.length();i++){
       char ch = exp.charAt(i);


         if(ch =='('){
               operand.push(ch);
         }
        else if(ch>='0' && ch<='9')
            operator.push(ch - '0');
         else if(ch=='+' || ch=='-' || ch=='*' || ch=='/'){
            while(operand.size() > 0 && operand.peek() != '(' && precedence(operand.peek()) >= precedence(ch)){
                char op = operand.pop();
           int v2 = operator.pop();
           int v1 = operator.pop();
           int res = result(v1,v2,op);
           operator.push(res);
            }

            operand.push(ch);
         }  
         else if(ch==')'){
           while(operand.size()>0 && operand.peek()!='('){
           char op = operand.pop();
           int v2 = operator.pop();
           int v1 = operator.pop();

           int res = result(v1,v2,op);
           operator.push(res);
           }
           operand.pop();

         }
    }
    while(operand.size()>0){
         char op = operand.pop();
           int v2 = operator.pop();
           int v1 = operator.pop();

           int res = result(v1,v2,op);
           operator.push(res);
    }

    System.out.println(operator.peek());

 }
 static int precedence(char op){
    if(op=='+'){
   return 1;
    }

    else if(op=='-'){
      return 1;
    }

    else if(op=='*'){
   return 2 ;

    }
    else {
   return 2 ;

    }
 }

 static int result(int v1,int v2, char op){
    if(op == '+'){
       return v1 + v2;
    }
    else if(op == '-'){
       return v1 - v2;
    }
    else if(op == '*'){
       return v1 * v2;
    }
    else{
       return v1 / v2;
    }

 }
}