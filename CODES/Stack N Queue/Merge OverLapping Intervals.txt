import java.io.*;
import java.util.*;

public class Main {

  static class Pair implements Comparable<Pair> {
    int start_time;
    int end_time;

    Pair(int start_time, int end_time) {
      this.start_time = start_time;
      this.end_time = end_time;
    }

    public int compareTo(Pair o) {
      if (this.start_time != o.start_time) {
        return this.start_time - o.start_time;
      }
      else {
        return this.end_time - o.end_time;
      }
    }
  }

  public static void main(String[] args) throws Exception {
    // write your code here
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    int[][] arr = new int[n][2];

    for (int j = 0; j < n; j++) {
      String line = br.readLine();
      arr[j][0] = Integer.parseInt(line.split(" ")[0]);
      arr[j][1] = Integer.parseInt(line.split(" ")[1]);
    }

    mergeOverlappingIntervals(arr);
  }

  public static void mergeOverlappingIntervals(int[][] arr) {
    // merge overlapping intervals and print in increasing order of start time

    ArrayList<Pair> list = new ArrayList<>();
    for (int i = 0; i < arr.length; i++) {
      list.add(new Pair(arr[i][0], arr[i][1]));
    }

    Collections.sort(list);

    Stack<Pair> stack = new Stack<>();

    for (int i = 0; i < list.size(); i++) {
      Pair p = list.get(i);

      if (i == 0) {
        stack.push(p);
      }
      else {
        Pair top = stack.peek();
        Pair current = p;

        if (current.start_time > top.end_time) {
          stack.push(current);
        }
        else {
          top.end_time = Math.max(current.end_time, top.end_time);
        }
      }


    }

    Stack<Pair> result = new Stack<>();
    while (stack.size() > 0) {
      result.push(stack.pop());
    }

    while (result.size() > 0) {
      Pair rp = result.pop();
      System.out.println(rp.start_time + " " + rp.end_time);
    }

  }

}